import java.security.MessageDigest
import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'maven-publish'

configurations {
    archives
}

publishing {
    repositories {
        maven {
            url "${System.getProperty('user.home')}/releases/maven/development"
        }
        maven {
            url "${System.getProperty('user.home')}/releases/maven/release"
        }
    }
}

ext.version = "2.2"
ext.libVersion = "${ext.version.replace(".", "")}"

def getTriplet() {
    def fileNameFinder = new FileNameFinder()
    for (File folder : file("$projectDir/vcpkg_installed").listFiles()) {
        if (folder.name == project.platform) {
            println folder.name
            return folder.name
        } 
    }
    throw new RuntimeException("Platform not found");
}


def getPlatformPath(triplet) {
    if (triplet == "arm32-linux") {
        return "linux/arm32"
    } else if (triplet == "arm64-linux") {
        return "linux/arm64"
    } else if (triplet == "x64-linux") {
        return "linux/x86-64"
    } else if (triplet == "x64-osx") {
        return "osx/x86-64"
    } else if (triplet == "arm64-osx") {
        return "osx/arm64"
    } else if (triplet == "x64-windows") {
        return "windows/x86-64"
    } else if (triplet == "arm64-windows") {
        return "windows/arm64"
    } else {
        return ""
    }
}

def triplet = getTriplet()
ext.platformPath = getPlatformPath(triplet)
ext.platformClassifier = ext.platformPath.replaceFirst('/', '')

ext.repo = "thirdparty-ceres"
def pubVersion = "2.2-3"

def outputsFolder = file("$project.buildDir/outputs")

def baseArtifactId = 'ceres'
def artifactGroupId = 'edu.wpi.first.thirdparty.frc2024.ceres'
def zipBaseName = '_GROUP_edu_wpi_first_thirdparty_frc2024_ceres_ID_ceres-cpp_CLS'

def versionFile = file("$outputsFolder/version.txt")
def licenseFile = file("LICENSE.md")

def outputClassifierStatic = project.ext.platformClassifier + 'static'
System.out.println(triplet)

task copyAllOutputs(type: Copy) {
    destinationDir = outputsFolder
}

ext.addTaskToCopyAllOutputs = { task ->
    copyAllOutputs.dependsOn task
    copyAllOutputs.inputs.file task.archiveFile
    copyAllOutputs.from task.archiveFile
}

task outputVersions() {
    description = 'Prints the versions of this to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        buildDir.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

task listLibsInDirectory {
    def buildDirectory = Paths.get(projectDir.canonicalPath).resolve("vcpkg_installed").resolve(triplet)
    doLast {
        def libDirectory = buildDirectory.resolve("lib").toFile()

        // Print out all .a files in the directory
        def libFiles = libDirectory.listFiles().findAll { file ->
            file.name.endsWith('.a') // Filter for .a files
        }

        if (libFiles.isEmpty()) {
            println "No .a files found in ${libDirectory}"
        } else {
            println "Found the following .a files in ${libDirectory}:"
            libFiles.each { file ->
                println " - ${file.name}"
            }
        }
    }
}


task cppHeadersZip(type: Zip) {
    dependsOn outputVersions
    destinationDirectory = outputsFolder
    archiveBaseName = zipBaseName
    archiveClassifier = "headers"

    from(licenseFile) {
        into '/'
    }
    def resolvedDir = Paths.get(projectDir.canonicalPath).resolve("vcpkg_installed").resolve(triplet).resolve("include")
    from(resolvedDir.toFile()) {
        into '/'
    }

    includeEmptyDirs = false
}

task mergeStaticLibs(type: Exec) {
    dependsOn listLibsInDirectory
    def buildDirectory = Paths.get(projectDir.canonicalPath).resolve("vcpkg_installed").resolve(triplet)

    if (project.platformPath.startsWith('windows')) {
        workingDir buildDirectory.resolve("lib").toString()
        executable 'lib'
        def inputFiles = ["libamd${project.libVersion}", "libbtf${project.libVersion}", "libcamd${project.libVersion}", "libccolamd${project.libVersion}", "libceres${project.libVersion}", "libcholmod${project.libVersion}", "libcxsparse${project.libVersion}", "libgflags${project.libVersion}", "libGKlib${project.libVersion}", "libglog${project.libVersion}", "libklu${project.libVersion}", "liblapack${project.libVersion}", "libldl${project.libVersion}", "libmetis${project.libVersion}", "libopenblas${project.libVersion}", "libspqr${project.libVersion}", "libsuitesparseconfig${project.libVersion}", "libumfpack${project.libVersion}"]
        def setArgs = ["/OUT:opencv${project.libVersion}.lib"]
        inputFiles.each {
            def inFile = it + ".lib"
            setArgs << inFile
        }
        args = setArgs
    } else if (project.platformPath.startsWith('osx')) {
        executable 'libtool'
        workingDir buildDirectory.resolve("lib").toString()
        
        def outputLibName = "libceres${project.libVersion}.a"

        def inputFiles = ["libspqr.a", "libldl.a", "libceres.a", "libccolamd.a", "libklu.a", "libcxsparse.a", "libglog.a", "libsuitesparseconfig.a", "libbtf.a", "libmetis.a", "libumfpack.a", "libcholmod.a", "libcamd.a", "libgflags.a", "libamd.a", "libGKlib.a", "libcolamd.a"]
        
        args '-static', '-o', outputLibName

        inputFiles.each {
            args "${buildDirectory.resolve("lib")}/$it"
        }

        inputs.files inputFiles.collect { buildDirectory.resolve("lib").resolve(it) }
        outputs.file buildDirectory.resolve("lib/${outputLibName}")
    } else {
        workingDir buildDirectory.resolve("lib").toString()
        executable 'ar'
        args = ['-M']
        def inputFiles = ["libamd", "libbtf", "libcamd", "libccolamd", "libceres", "libcholmod", "libcxsparse", "libgflags", "libGKlib", "libglog", "libklu", "liblapack", "libldl", "libmetis", "libopenblas", "libspqr", "libsuitesparseconfig", "libumfpack"]

        def inputString = "create libceres${project.libVersion}.a\n"
        inputFiles.each {
            def inFile = 'addlib ' + it + ".a\n"
            inputString += inFile
        }

        inputString += "save\nend\n"
        standardInput = new ByteArrayInputStream(inputString.getBytes())
    }
}

task mergeDebugStaticLibs(type: Exec) {
    dependsOn listLibsInDirectory
    def buildDirectory = Paths.get(projectDir.canonicalPath).resolve("vcpkg_installed").resolve(triplet).resolve("debug")

    if (project.platformPath.startsWith('windows')) {
        workingDir buildDirectory.resolve("lib").toString()
        executable 'lib'
        def inputFiles = ["libamd${project.libVersion}", "libbtf${project.libVersion}", "libcamd${project.libVersion}", "libccolamd${project.libVersion}", "libceres${project.libVersion}", "libcholmod${project.libVersion}", "libcxsparse${project.libVersion}", "libgflags${project.libVersion}", "libGKlib${project.libVersion}", "libglog${project.libVersion}", "libklu${project.libVersion}", "liblapack${project.libVersion}", "libldl${project.libVersion}", "libmetis${project.libVersion}", "libopenblas${project.libVersion}", "libspqr${project.libVersion}", "libsuitesparseconfig${project.libVersion}", "libumfpack${project.libVersion}"]
        def setArgs = ["/OUT:opencv${project.libVersion}.lib"]
        inputFiles.each {
            def inFile = it + "-debug" + ".lib"
            setArgs << inFile
        }
        args = setArgs
    } else if (project.platformPath.startsWith('osx')) {
        executable 'libtool'
        workingDir buildDirectory.resolve("lib").toString()
        def libDirectory = buildDirectory.toFile()
        args '-static'
        args '-o'
        args "libceres-debug${project.libVersion}.a"
        doFirst {
            libDirectory.eachFile() {
                if (!it.name.endsWith('.a')) {
                    return
                }
                args it.absolutePath
            }
        }
        inputs.dir buildDirectory.resolve("lib").toFile()
    } else {
        workingDir buildDirectory.resolve("lib").toString()
        executable 'ar'
        args = ['-M']
        def inputFiles = ["libamdd", "libbtfd", "libcamdd", "libccolamdd", "libceres-debug", "libcholmodd", "libcolamdd", "libcxsparsed", "libgflags_debug", "libGKlib", "libglog", "libklud", "liblapack", "libldld", "libmetis", "libopenblas", "libspqrd", "libsuitesparseconfigd", "libumfpackd"]

        def inputString = "create libceres-debug${project.libVersion}.a\n"
        inputFiles.each {
            def inFile = 'addlib ' + it + ".a\n"
            inputString += inFile
        }

        inputString += "save\nend\n"
        standardInput = new ByteArrayInputStream(inputString.getBytes())
    }
}

task cppLibsZipStatic(type: Zip) {
    dependsOn mergeStaticLibs
    destinationDirectory = outputsFolder
    archiveClassifier = outputClassifierStatic
    archiveBaseName = zipBaseName
    duplicatesStrategy = 'exclude'

    from(licenseFile) {
        into '/'
    }
    def resolvedDir = Paths.get(projectDir.canonicalPath).resolve("vcpkg_installed").resolve(triplet).resolve("lib")
    from(resolvedDir.toFile()) {
        into project.platformPath + '/static'
        exclude '**/pkgconfig'
        include '**/*.a'
        include '**/*.lib'
        include '**/*.pdb'
    }
}

task cppLibsZipStaticDebug(type: Zip) {
    dependsOn mergeDebugStaticLibs
    destinationDirectory = outputsFolder
    archiveClassifier = outputClassifierStatic + 'debug'
    archiveBaseName = zipBaseName
    duplicatesStrategy = 'exclude'

    from(licenseFile) {
        into '/'
    }
    def resolvedDir = Paths.get(projectDir.canonicalPath).resolve("vcpkg_installed").resolve(triplet).resolve("debug").resolve("lib")
    from(resolvedDir.toFile()) {
        into project.platformPath + '/static'
        exclude '**/pkgconfig'
        include '**/*.a'
        include '**/*.lib'
        include '**/*.pdb'
    }
}

if (!project.hasProperty('skipRelease')) {
    addTaskToCopyAllOutputs(cppLibsZipStatic)
}

if (!project.hasProperty('skipDebug')) {
    addTaskToCopyAllOutputs(cppLibsZipStaticDebug)
}

model {
    publishing {
        publications {
            cpp(MavenPublication) {
                artifact cppHeadersZip
                artifact cppLibsZipStatic
                artifact cppLibsZipStaticDebug

                artifactId = "${baseArtifactId}-cpp"
                groupId artifactGroupId
                version pubVersion
            }
        }
        repositories {
            maven {
                url "${System.getProperty('user.home')}/releases/maven/${project.repo}"
            }
        }
    }
}
